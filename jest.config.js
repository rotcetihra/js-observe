/**
 * Подробное объяснение каждой конфигурационной опции смотрите по адресу:
 * https://jestjs.io/docs/configuration
 */

/** @type {import('jest').Config} */
const config = {
    // Все импортированные модули в ваших тестах должны автоматически мокаться
    // automock: false,

    // Остановить выполнение тестов после `n` неудач
    // bail: 0,

    // Каталог, где Jest должен хранить кэшированную информацию о зависимостях
    // cacheDirectory: "/tmp/jest_rs",

    // Автоматически очищать вызовы, экземпляры, контексты и результаты моков перед каждым тестом
    clearMocks: true,

    // Указывает, должна ли собираться информация о покрытии во время выполнения теста
    // collectCoverage: false,

    // Массив шаблонов glob, указывающих набор файлов, для которых должна собираться информация о покрытии
    // collectCoverageFrom: undefined,

    // Каталог, куда Jest должен выводить файлы покрытия
    // coverageDirectory: undefined,

    // Массив строк с регулярными выражениями, используемых для пропуска сбора покрытия
    // coveragePathIgnorePatterns: [
    //   "/node_modules/"
    // ],

    // Указывает, какой провайдер должен использоваться для инструментирования кода для покрытия
    coverageProvider: 'v8',

    // Список имён репортёров, которые Jest использует при записи отчётов о покрытии
    // coverageReporters: [
    //   "json",
    //   "text",
    //   "lcov",
    //   "clover"
    // ],

    // Объект, настраивающий минимальные пороги для результатов покрытия
    // coverageThreshold: undefined,

    // Путь к пользовательскому извлекателю зависимостей
    // dependencyExtractor: undefined,

    // Вызов устаревших API вызывает полезные сообщения об ошибках
    // errorOnDeprecated: false,

    // Конфигурация по умолчанию для фейковых таймеров
    // fakeTimers: {
    //   "enableGlobally": false
    // },

    // Принудительный сбор покрытия с игнорируемых файлов с помощью массива шаблонов glob
    // forceCoverageMatch: [],

    // Путь к модулю, экспортирующему асинхронную функцию, которая вызывается один раз перед всеми наборами тестов
    // globalSetup: undefined,

    // Путь к модулю, экспортирующему асинхронную функцию, которая вызывается один раз после всех наборов тестов
    // globalTeardown: undefined,

    // Набор глобальных переменных, которые должны быть доступны во всех тестовых окружениях
    // globals: {},

    // Максимальное количество воркеров, используемых для запуска тестов. Может быть указано в % или числом. Например, maxWorkers: 10% будет использовать 10% от количества ваших CPU + 1 как максимальное число воркеров. maxWorkers: 2 будет использовать максимум 2 воркера.
    // maxWorkers: "50%",

    // Массив имён каталогов, которые будут рекурсивно искаться вверх от местоположения требуемого модуля
    // moduleDirectories: [
    //   "node_modules"
    // ],

    // Массив расширений файлов, которые используют ваши модули
    // moduleFileExtensions: [
    //   "js",
    //   "mjs",
    //   "cjs",
    //   "jsx",
    //   "ts",
    //   "mts",
    //   "cts",
    //   "tsx",
    //   "json",
    //   "node"
    // ],

    // Карта от регулярных выражений к именам модулей или массивам имён модулей, позволяющая подменять ресурсы одним модулем
    // moduleNameMapper: {},

    // Массив строк с регулярными выражениями, которые сопоставляются со всеми путями модулей перед тем, как они будут считаться 'видимыми' для загрузчика модулей
    // modulePathIgnorePatterns: [],

    // Включает уведомления о результатах тестирования
    // notify: false,

    // Перечисление, определяющее режим уведомлений. Требует { notify: true }
    // notifyMode: "failure-change",

    // Пресет, используемый как база для конфигурации Jest
    // preset: undefined,

    // Запуск тестов из одного или нескольких проектов
    // projects: undefined,

    // Используйте эту опцию конфигурации для добавления пользовательских репортёров в Jest
    // reporters: undefined,

    // Автоматически сбрасывать состояние моков перед каждым тестом
    // resetMocks: false,

    // Сбрасывать реестр модулей перед запуском каждого отдельного теста
    // resetModules: false,

    // Путь к пользовательскому резолверу
    // resolver: undefined,

    // Автоматически восстанавливать состояние и реализацию моков перед каждым тестом
    // restoreMocks: false,

    // Корневой каталог, который Jest должен сканировать для поиска тестов и модулей
    // rootDir: undefined,

    // Список путей к каталогам, которые Jest должен использовать для поиска файлов
    // roots: [
    //   "<rootDir>"
    // ],

    // Позволяет использовать пользовательский раннер вместо стандартного тестового раннера Jest
    // runner: "jest-runner",

    // Пути к модулям, которые выполняют некоторый код для настройки тестового окружения перед каждым тестом
    // setupFiles: [],

    // Список путей к модулям, которые выполняют некоторый код для настройки тестового фреймворка перед каждым тестом
    // setupFilesAfterEnv: [],

    // Количество секунд, после которых тест считается медленным и отображается как таковой в результатах
    // slowTestThreshold: 5,

    // Список путей к модулям сериализаторов снапшотов, которые Jest должен использовать для снапшот-тестирования
    // snapshotSerializers: [],

    // Тестовое окружение, которое будет использоваться для тестирования
    testEnvironment: 'jsdom',

    // Опции, которые будут переданы в testEnvironment
    // testEnvironmentOptions: {},

    // Добавляет поле с местоположением в результаты тестов
    // testLocationInResults: false,

    // Шаблоны glob, которые Jest использует для обнаружения тестовых файлов
    // testMatch: [
    //   "**/__tests__/**/*.?([mc])[jt]s?(x)",
    //   "**/?(*.)+(spec|test).?([mc])[jt]s?(x)"
    // ],

    // Массив строк с регулярными выражениями, которые сопоставляются со всеми путями тестов, совпавшие тесты пропускаются
    // testPathIgnorePatterns: [
    //   "/node_modules/"
    // ],

    // Регулярное выражение или массив выражений, которые Jest использует для обнаружения тестовых файлов
    // testRegex: [],

    // Эта опция позволяет использовать пользовательский процессор результатов
    // testResultsProcessor: undefined,

    // Эта опция позволяет использовать пользовательский тестовый раннер
    // testRunner: "jest-circus/runner",

    // Карта от регулярных выражений к путям к трансформерам
    // transform: undefined,

    // Массив строк с регулярными выражениями, которые сопоставляются со всеми путями исходных файлов, совпавшие файлы пропускают трансформацию
    // transformIgnorePatterns: [
    //   "/node_modules/",
    //   "\\.pnp\\.[^\\/]+$"
    // ],

    // Массив строк с регулярными выражениями, которые сопоставляются со всеми модулями перед тем, как загрузчик модулей автоматически вернёт для них мок
    // unmockedModulePathPatterns: undefined,

    // Указывает, должен ли каждый отдельный тест отображаться в отчёте во время выполнения
    // verbose: undefined,

    // Массив регулярных выражений, которые сопоставляются со всеми путями исходных файлов перед повторным запуском тестов в режиме наблюдения
    // watchPathIgnorePatterns: [],

    // Использовать ли watchman для обхода файлов
    // watchman: true,
};

module.exports = config;
